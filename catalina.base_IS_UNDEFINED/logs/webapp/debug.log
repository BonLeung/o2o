2018-04-28 00:47:25.553 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductImgDao.batchInsertProductImg] use [master] Strategy, SqlCommanType [INSERT]...
2018-04-28 00:47:25.560 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 00:47:25.600 [main] DEBUG c.l.o2o.dao.ProductImgDao.batchInsertProductImg - ==>  Preparing: INSERT INTO tb_product_img(`addr`, `desc`, `priority`, `create_time`, `update_time`, `product_id`) VALUES (?, ?, ?, ?, ?, ?) , (?, ?, ?, ?, ?, ?) 
2018-04-28 00:47:25.625 [main] DEBUG c.l.o2o.dao.ProductImgDao.batchInsertProductImg - ==> Parameters: 图片1(String), 测试图片1(String), 1(Integer), 2018-04-28 00:47:25.536(Timestamp), null, 2(Long), 图片1(String), 测试图片1(String), 1(Integer), 2018-04-28 00:47:25.536(Timestamp), null, 2(Long)
2018-04-28 00:47:25.633 [main] DEBUG c.l.o2o.dao.ProductImgDao.batchInsertProductImg - <==    Updates: 2
2018-04-28 00:47:25.644 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductDao.queryProductById] use [slave] Strategy, SqlCommanType [SELECT]...
2018-04-28 00:47:25.644 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：slave
2018-04-28 00:47:25.645 [main] DEBUG c.liangweibang.o2o.dao.ProductDao.queryProductById - ==>  Preparing: SELECT p.product_id, p.name, p.desc, p.addr, p.normal_price, p.promotion_price, p.priority, p.create_time, p.update_time, p.status, p.product_category_id, p.shop_id, pm.product_img_id, pm.addr AS detail_img, pm.desc, pm.priority, pm.create_time, pm.update_time FROM tb_product p LEFT JOIN tb_product_img pm ON p.product_id = pm.product_id WHERE p.product_id = ? ORDER BY pm.priority DESC 
2018-04-28 00:47:25.657 [main] DEBUG c.liangweibang.o2o.dao.ProductDao.queryProductById - ==> Parameters: 2(Long)
2018-04-28 00:47:25.680 [main] DEBUG c.liangweibang.o2o.dao.ProductDao.queryProductById - <==      Total: 2
2018-04-28 00:47:25.686 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductImgDao.deleteProductImgByProductId] use [master] Strategy, SqlCommanType [DELETE]...
2018-04-28 00:47:25.686 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 00:47:25.687 [main] DEBUG c.l.o.d.ProductImgDao.deleteProductImgByProductId - ==>  Preparing: DELETE FROM tb_product_img WHERE product_id = ? 
2018-04-28 00:47:25.687 [main] DEBUG c.l.o.d.ProductImgDao.deleteProductImgByProductId - ==> Parameters: 2(Long)
2018-04-28 00:47:25.690 [main] DEBUG c.l.o.d.ProductImgDao.deleteProductImgByProductId - <==    Updates: 2
2018-04-28 00:47:25.692 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductDao.insertProduct] use [master] Strategy, SqlCommanType [INSERT]...
2018-04-28 00:47:25.693 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 00:47:25.693 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==>  Preparing: INSERT INTO tb_product(`name`, `desc`, `addr`, `normal_price`, `promotion_price`, `priority`, `create_time`, `update_time`, `status`, `product_category_id`, `shop_id`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-04-28 00:47:25.694 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==> Parameters: 测试商品1(String), desc1(String), addr1(String), null, null, 1(Integer), null, null, 1(Integer), 4(Long), 3(Long)
2018-04-28 00:47:25.697 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - <==    Updates: 1
2018-04-28 00:47:25.698 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductDao.insertProduct] use [master] Strategy, SqlCommanType [INSERT]...
2018-04-28 00:47:25.698 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 00:47:25.698 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==>  Preparing: INSERT INTO tb_product(`name`, `desc`, `addr`, `normal_price`, `promotion_price`, `priority`, `create_time`, `update_time`, `status`, `product_category_id`, `shop_id`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-04-28 00:47:25.699 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==> Parameters: 测试商品2(String), desc1(String), addr1(String), null, null, 1(Integer), null, null, 1(Integer), 4(Long), 3(Long)
2018-04-28 00:47:25.701 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - <==    Updates: 1
2018-04-28 00:47:25.701 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductDao.insertProduct] use [master] Strategy, SqlCommanType [INSERT]...
2018-04-28 00:47:25.701 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 00:47:25.702 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==>  Preparing: INSERT INTO tb_product(`name`, `desc`, `addr`, `normal_price`, `promotion_price`, `priority`, `create_time`, `update_time`, `status`, `product_category_id`, `shop_id`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-04-28 00:47:25.702 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==> Parameters: 测试商品3(String), desc1(String), addr1(String), null, null, 1(Integer), null, null, 1(Integer), 4(Long), 3(Long)
2018-04-28 00:47:25.704 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - <==    Updates: 1
2018-04-28 00:53:18.386 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductDao.updateProduct] use [master] Strategy, SqlCommanType [UPDATE]...
2018-04-28 00:53:18.388 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 00:53:18.433 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.updateProduct - ==>  Preparing: UPDATE tb_product SET name=? product_category_id=? WHERE product_id = ? AND shop_id = ? 
2018-04-28 00:53:18.457 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.updateProduct - ==> Parameters: 奶茶111(String), 31(Long), 2(Long), 3(Long)
2018-04-28 00:53:18.516 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductImgDao.batchInsertProductImg] use [master] Strategy, SqlCommanType [INSERT]...
2018-04-28 00:53:18.517 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 00:53:18.519 [main] DEBUG c.l.o2o.dao.ProductImgDao.batchInsertProductImg - ==>  Preparing: INSERT INTO tb_product_img(`addr`, `desc`, `priority`, `create_time`, `update_time`, `product_id`) VALUES (?, ?, ?, ?, ?, ?) , (?, ?, ?, ?, ?, ?) 
2018-04-28 00:53:18.522 [main] DEBUG c.l.o2o.dao.ProductImgDao.batchInsertProductImg - ==> Parameters: 图片1(String), 测试图片1(String), 1(Integer), 2018-04-28 00:53:18.516(Timestamp), null, 2(Long), 图片2(String), 测试图片2(String), 1(Integer), 2018-04-28 00:53:18.516(Timestamp), null, 2(Long)
2018-04-28 00:53:18.524 [main] DEBUG c.l.o2o.dao.ProductImgDao.batchInsertProductImg - <==    Updates: 2
2018-04-28 00:53:18.532 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductDao.queryProductById] use [slave] Strategy, SqlCommanType [SELECT]...
2018-04-28 00:53:18.532 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：slave
2018-04-28 00:53:18.533 [main] DEBUG c.liangweibang.o2o.dao.ProductDao.queryProductById - ==>  Preparing: SELECT p.product_id, p.name, p.desc, p.addr, p.normal_price, p.promotion_price, p.priority, p.create_time, p.update_time, p.status, p.product_category_id, p.shop_id, pm.product_img_id, pm.addr AS detail_img, pm.desc, pm.priority, pm.create_time, pm.update_time FROM tb_product p LEFT JOIN tb_product_img pm ON p.product_id = pm.product_id WHERE p.product_id = ? ORDER BY pm.priority DESC 
2018-04-28 00:53:18.545 [main] DEBUG c.liangweibang.o2o.dao.ProductDao.queryProductById - ==> Parameters: 2(Long)
2018-04-28 00:53:18.562 [main] DEBUG c.liangweibang.o2o.dao.ProductDao.queryProductById - <==      Total: 2
2018-04-28 00:53:18.563 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductImgDao.deleteProductImgByProductId] use [master] Strategy, SqlCommanType [DELETE]...
2018-04-28 00:53:18.564 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 00:53:18.564 [main] DEBUG c.l.o.d.ProductImgDao.deleteProductImgByProductId - ==>  Preparing: DELETE FROM tb_product_img WHERE product_id = ? 
2018-04-28 00:53:18.564 [main] DEBUG c.l.o.d.ProductImgDao.deleteProductImgByProductId - ==> Parameters: 2(Long)
2018-04-28 00:53:18.566 [main] DEBUG c.l.o.d.ProductImgDao.deleteProductImgByProductId - <==    Updates: 2
2018-04-28 00:53:18.567 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductDao.insertProduct] use [master] Strategy, SqlCommanType [INSERT]...
2018-04-28 00:53:18.567 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 00:53:18.567 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==>  Preparing: INSERT INTO tb_product(`name`, `desc`, `addr`, `normal_price`, `promotion_price`, `priority`, `create_time`, `update_time`, `status`, `product_category_id`, `shop_id`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-04-28 00:53:18.568 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==> Parameters: 测试商品1(String), desc1(String), addr1(String), null, null, 1(Integer), null, null, 1(Integer), 4(Long), 3(Long)
2018-04-28 00:53:18.570 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - <==    Updates: 1
2018-04-28 00:53:18.570 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductDao.insertProduct] use [master] Strategy, SqlCommanType [INSERT]...
2018-04-28 00:53:18.570 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 00:53:18.571 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==>  Preparing: INSERT INTO tb_product(`name`, `desc`, `addr`, `normal_price`, `promotion_price`, `priority`, `create_time`, `update_time`, `status`, `product_category_id`, `shop_id`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-04-28 00:53:18.571 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==> Parameters: 测试商品2(String), desc1(String), addr1(String), null, null, 1(Integer), null, null, 1(Integer), 4(Long), 3(Long)
2018-04-28 00:53:18.572 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - <==    Updates: 1
2018-04-28 00:53:18.573 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductDao.insertProduct] use [master] Strategy, SqlCommanType [INSERT]...
2018-04-28 00:53:18.573 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 00:53:18.573 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==>  Preparing: INSERT INTO tb_product(`name`, `desc`, `addr`, `normal_price`, `promotion_price`, `priority`, `create_time`, `update_time`, `status`, `product_category_id`, `shop_id`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-04-28 00:53:18.574 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==> Parameters: 测试商品3(String), desc1(String), addr1(String), null, null, 1(Integer), null, null, 1(Integer), 4(Long), 3(Long)
2018-04-28 00:53:18.576 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - <==    Updates: 1
2018-04-28 00:54:30.585 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductImgDao.batchInsertProductImg] use [master] Strategy, SqlCommanType [INSERT]...
2018-04-28 00:54:30.588 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 00:54:30.624 [main] DEBUG c.l.o2o.dao.ProductImgDao.batchInsertProductImg - ==>  Preparing: INSERT INTO tb_product_img(`addr`, `desc`, `priority`, `create_time`, `update_time`, `product_id`) VALUES (?, ?, ?, ?, ?, ?) , (?, ?, ?, ?, ?, ?) 
2018-04-28 00:54:30.647 [main] DEBUG c.l.o2o.dao.ProductImgDao.batchInsertProductImg - ==> Parameters: 图片1(String), 测试图片1(String), 1(Integer), 2018-04-28 00:54:30.57(Timestamp), null, 2(Long), 图片2(String), 测试图片2(String), 1(Integer), 2018-04-28 00:54:30.57(Timestamp), null, 2(Long)
2018-04-28 00:54:30.653 [main] DEBUG c.l.o2o.dao.ProductImgDao.batchInsertProductImg - <==    Updates: 2
2018-04-28 00:54:30.660 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductDao.queryProductById] use [slave] Strategy, SqlCommanType [SELECT]...
2018-04-28 00:54:30.660 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：slave
2018-04-28 00:54:30.661 [main] DEBUG c.liangweibang.o2o.dao.ProductDao.queryProductById - ==>  Preparing: SELECT p.product_id, p.name, p.desc, p.addr, p.normal_price, p.promotion_price, p.priority, p.create_time, p.update_time, p.status, p.product_category_id, p.shop_id, pm.product_img_id, pm.addr AS detail_img, pm.desc, pm.priority, pm.create_time, pm.update_time FROM tb_product p LEFT JOIN tb_product_img pm ON p.product_id = pm.product_id WHERE p.product_id = ? ORDER BY pm.priority DESC 
2018-04-28 00:54:30.671 [main] DEBUG c.liangweibang.o2o.dao.ProductDao.queryProductById - ==> Parameters: 2(Long)
2018-04-28 00:54:30.695 [main] DEBUG c.liangweibang.o2o.dao.ProductDao.queryProductById - <==      Total: 2
2018-04-28 00:54:30.702 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductImgDao.deleteProductImgByProductId] use [master] Strategy, SqlCommanType [DELETE]...
2018-04-28 00:54:30.702 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 00:54:30.702 [main] DEBUG c.l.o.d.ProductImgDao.deleteProductImgByProductId - ==>  Preparing: DELETE FROM tb_product_img WHERE product_id = ? 
2018-04-28 00:54:30.703 [main] DEBUG c.l.o.d.ProductImgDao.deleteProductImgByProductId - ==> Parameters: 2(Long)
2018-04-28 00:54:30.704 [main] DEBUG c.l.o.d.ProductImgDao.deleteProductImgByProductId - <==    Updates: 2
2018-04-28 00:54:30.707 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductDao.updateProduct] use [master] Strategy, SqlCommanType [UPDATE]...
2018-04-28 00:54:30.708 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 00:54:30.718 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.updateProduct - ==>  Preparing: UPDATE tb_product SET name=? product_category_id=? WHERE product_id = ? AND shop_id = ? 
2018-04-28 00:54:30.718 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.updateProduct - ==> Parameters: 奶茶111(String), 31(Long), 2(Long), 3(Long)
2018-04-28 00:54:30.765 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductDao.insertProduct] use [master] Strategy, SqlCommanType [INSERT]...
2018-04-28 00:54:30.765 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 00:54:30.765 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==>  Preparing: INSERT INTO tb_product(`name`, `desc`, `addr`, `normal_price`, `promotion_price`, `priority`, `create_time`, `update_time`, `status`, `product_category_id`, `shop_id`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-04-28 00:54:30.766 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==> Parameters: 测试商品1(String), desc1(String), addr1(String), null, null, 1(Integer), null, null, 1(Integer), 4(Long), 3(Long)
2018-04-28 00:54:30.770 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - <==    Updates: 1
2018-04-28 00:54:30.771 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductDao.insertProduct] use [master] Strategy, SqlCommanType [INSERT]...
2018-04-28 00:54:30.771 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 00:54:30.771 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==>  Preparing: INSERT INTO tb_product(`name`, `desc`, `addr`, `normal_price`, `promotion_price`, `priority`, `create_time`, `update_time`, `status`, `product_category_id`, `shop_id`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-04-28 00:54:30.772 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==> Parameters: 测试商品2(String), desc1(String), addr1(String), null, null, 1(Integer), null, null, 1(Integer), 4(Long), 3(Long)
2018-04-28 00:54:30.773 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - <==    Updates: 1
2018-04-28 00:54:30.774 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductDao.insertProduct] use [master] Strategy, SqlCommanType [INSERT]...
2018-04-28 00:54:30.774 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 00:54:30.774 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==>  Preparing: INSERT INTO tb_product(`name`, `desc`, `addr`, `normal_price`, `promotion_price`, `priority`, `create_time`, `update_time`, `status`, `product_category_id`, `shop_id`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-04-28 00:54:30.775 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==> Parameters: 测试商品3(String), desc1(String), addr1(String), null, null, 1(Integer), null, null, 1(Integer), 4(Long), 3(Long)
2018-04-28 00:54:30.776 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - <==    Updates: 1
2018-04-28 00:56:29.778 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductImgDao.batchInsertProductImg] use [master] Strategy, SqlCommanType [INSERT]...
2018-04-28 00:56:29.781 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 00:56:29.814 [main] DEBUG c.l.o2o.dao.ProductImgDao.batchInsertProductImg - ==>  Preparing: INSERT INTO tb_product_img(`addr`, `desc`, `priority`, `create_time`, `update_time`, `product_id`) VALUES (?, ?, ?, ?, ?, ?) , (?, ?, ?, ?, ?, ?) 
2018-04-28 00:56:29.836 [main] DEBUG c.l.o2o.dao.ProductImgDao.batchInsertProductImg - ==> Parameters: 图片1(String), 测试图片1(String), 1(Integer), 2018-04-28 00:56:29.766(Timestamp), null, 2(Long), 图片2(String), 测试图片2(String), 1(Integer), 2018-04-28 00:56:29.766(Timestamp), null, 2(Long)
2018-04-28 00:56:29.844 [main] DEBUG c.l.o2o.dao.ProductImgDao.batchInsertProductImg - <==    Updates: 2
2018-04-28 00:56:29.851 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductDao.queryProductById] use [slave] Strategy, SqlCommanType [SELECT]...
2018-04-28 00:56:29.851 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：slave
2018-04-28 00:56:29.852 [main] DEBUG c.liangweibang.o2o.dao.ProductDao.queryProductById - ==>  Preparing: SELECT p.product_id, p.name, p.desc, p.addr, p.normal_price, p.promotion_price, p.priority, p.create_time, p.update_time, p.status, p.product_category_id, p.shop_id, pm.product_img_id, pm.addr AS detail_img, pm.desc, pm.priority, pm.create_time, pm.update_time FROM tb_product p LEFT JOIN tb_product_img pm ON p.product_id = pm.product_id WHERE p.product_id = ? ORDER BY pm.priority DESC 
2018-04-28 00:56:29.867 [main] DEBUG c.liangweibang.o2o.dao.ProductDao.queryProductById - ==> Parameters: 2(Long)
2018-04-28 00:56:29.889 [main] DEBUG c.liangweibang.o2o.dao.ProductDao.queryProductById - <==      Total: 2
2018-04-28 00:56:29.896 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductImgDao.deleteProductImgByProductId] use [master] Strategy, SqlCommanType [DELETE]...
2018-04-28 00:56:29.896 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 00:56:29.897 [main] DEBUG c.l.o.d.ProductImgDao.deleteProductImgByProductId - ==>  Preparing: DELETE FROM tb_product_img WHERE product_id = ? 
2018-04-28 00:56:29.897 [main] DEBUG c.l.o.d.ProductImgDao.deleteProductImgByProductId - ==> Parameters: 2(Long)
2018-04-28 00:56:29.899 [main] DEBUG c.l.o.d.ProductImgDao.deleteProductImgByProductId - <==    Updates: 2
2018-04-28 00:56:29.903 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductDao.updateProduct] use [master] Strategy, SqlCommanType [UPDATE]...
2018-04-28 00:56:29.903 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 00:56:29.925 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.updateProduct - ==>  Preparing: UPDATE tb_product SET name=? product_category_id=? WHERE `product_id` = ? AND `shop_id` = ? 
2018-04-28 00:56:29.926 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.updateProduct - ==> Parameters: 奶茶111(String), 31(Long), 2(Long), 3(Long)
2018-04-28 00:56:29.994 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductDao.insertProduct] use [master] Strategy, SqlCommanType [INSERT]...
2018-04-28 00:56:29.994 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 00:56:29.995 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==>  Preparing: INSERT INTO tb_product(`name`, `desc`, `addr`, `normal_price`, `promotion_price`, `priority`, `create_time`, `update_time`, `status`, `product_category_id`, `shop_id`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-04-28 00:56:29.996 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==> Parameters: 测试商品1(String), desc1(String), addr1(String), null, null, 1(Integer), null, null, 1(Integer), 4(Long), 3(Long)
2018-04-28 00:56:29.999 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - <==    Updates: 1
2018-04-28 00:56:30.000 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductDao.insertProduct] use [master] Strategy, SqlCommanType [INSERT]...
2018-04-28 00:56:30.000 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 00:56:30.000 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==>  Preparing: INSERT INTO tb_product(`name`, `desc`, `addr`, `normal_price`, `promotion_price`, `priority`, `create_time`, `update_time`, `status`, `product_category_id`, `shop_id`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-04-28 00:56:30.001 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==> Parameters: 测试商品2(String), desc1(String), addr1(String), null, null, 1(Integer), null, null, 1(Integer), 4(Long), 3(Long)
2018-04-28 00:56:30.003 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - <==    Updates: 1
2018-04-28 00:56:30.004 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductDao.insertProduct] use [master] Strategy, SqlCommanType [INSERT]...
2018-04-28 00:56:30.004 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 00:56:30.004 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==>  Preparing: INSERT INTO tb_product(`name`, `desc`, `addr`, `normal_price`, `promotion_price`, `priority`, `create_time`, `update_time`, `status`, `product_category_id`, `shop_id`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-04-28 00:56:30.005 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==> Parameters: 测试商品3(String), desc1(String), addr1(String), null, null, 1(Integer), null, null, 1(Integer), 4(Long), 3(Long)
2018-04-28 00:56:30.010 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - <==    Updates: 1
2018-04-28 00:56:30.748 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductImgDao.batchInsertProductImg] use [master] Strategy, SqlCommanType [INSERT]...
2018-04-28 00:56:30.751 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 00:56:30.786 [main] DEBUG c.l.o2o.dao.ProductImgDao.batchInsertProductImg - ==>  Preparing: INSERT INTO tb_product_img(`addr`, `desc`, `priority`, `create_time`, `update_time`, `product_id`) VALUES (?, ?, ?, ?, ?, ?) , (?, ?, ?, ?, ?, ?) 
2018-04-28 00:56:30.809 [main] DEBUG c.l.o2o.dao.ProductImgDao.batchInsertProductImg - ==> Parameters: 图片1(String), 测试图片1(String), 1(Integer), 2018-04-28 00:56:30.734(Timestamp), null, 2(Long), 图片2(String), 测试图片2(String), 1(Integer), 2018-04-28 00:56:30.734(Timestamp), null, 2(Long)
2018-04-28 00:56:30.816 [main] DEBUG c.l.o2o.dao.ProductImgDao.batchInsertProductImg - <==    Updates: 2
2018-04-28 00:56:30.823 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductDao.queryProductById] use [slave] Strategy, SqlCommanType [SELECT]...
2018-04-28 00:56:30.823 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：slave
2018-04-28 00:56:30.824 [main] DEBUG c.liangweibang.o2o.dao.ProductDao.queryProductById - ==>  Preparing: SELECT p.product_id, p.name, p.desc, p.addr, p.normal_price, p.promotion_price, p.priority, p.create_time, p.update_time, p.status, p.product_category_id, p.shop_id, pm.product_img_id, pm.addr AS detail_img, pm.desc, pm.priority, pm.create_time, pm.update_time FROM tb_product p LEFT JOIN tb_product_img pm ON p.product_id = pm.product_id WHERE p.product_id = ? ORDER BY pm.priority DESC 
2018-04-28 00:56:30.835 [main] DEBUG c.liangweibang.o2o.dao.ProductDao.queryProductById - ==> Parameters: 2(Long)
2018-04-28 00:56:30.851 [main] DEBUG c.liangweibang.o2o.dao.ProductDao.queryProductById - <==      Total: 2
2018-04-28 00:56:30.857 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductImgDao.deleteProductImgByProductId] use [master] Strategy, SqlCommanType [DELETE]...
2018-04-28 00:56:30.857 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 00:56:30.857 [main] DEBUG c.l.o.d.ProductImgDao.deleteProductImgByProductId - ==>  Preparing: DELETE FROM tb_product_img WHERE product_id = ? 
2018-04-28 00:56:30.857 [main] DEBUG c.l.o.d.ProductImgDao.deleteProductImgByProductId - ==> Parameters: 2(Long)
2018-04-28 00:56:30.859 [main] DEBUG c.l.o.d.ProductImgDao.deleteProductImgByProductId - <==    Updates: 2
2018-04-28 00:56:30.861 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductDao.updateProduct] use [master] Strategy, SqlCommanType [UPDATE]...
2018-04-28 00:56:30.862 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 00:56:30.870 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.updateProduct - ==>  Preparing: UPDATE tb_product SET name=? product_category_id=? WHERE `product_id` = ? AND `shop_id` = ? 
2018-04-28 00:56:30.871 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.updateProduct - ==> Parameters: 奶茶111(String), 31(Long), 2(Long), 3(Long)
2018-04-28 00:56:30.924 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductDao.insertProduct] use [master] Strategy, SqlCommanType [INSERT]...
2018-04-28 00:56:30.925 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 00:56:30.925 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==>  Preparing: INSERT INTO tb_product(`name`, `desc`, `addr`, `normal_price`, `promotion_price`, `priority`, `create_time`, `update_time`, `status`, `product_category_id`, `shop_id`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-04-28 00:56:30.926 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==> Parameters: 测试商品1(String), desc1(String), addr1(String), null, null, 1(Integer), null, null, 1(Integer), 4(Long), 3(Long)
2018-04-28 00:56:30.929 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - <==    Updates: 1
2018-04-28 00:56:30.929 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductDao.insertProduct] use [master] Strategy, SqlCommanType [INSERT]...
2018-04-28 00:56:30.929 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 00:56:30.930 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==>  Preparing: INSERT INTO tb_product(`name`, `desc`, `addr`, `normal_price`, `promotion_price`, `priority`, `create_time`, `update_time`, `status`, `product_category_id`, `shop_id`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-04-28 00:56:30.930 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==> Parameters: 测试商品2(String), desc1(String), addr1(String), null, null, 1(Integer), null, null, 1(Integer), 4(Long), 3(Long)
2018-04-28 00:56:30.932 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - <==    Updates: 1
2018-04-28 00:56:30.933 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductDao.insertProduct] use [master] Strategy, SqlCommanType [INSERT]...
2018-04-28 00:56:30.933 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 00:56:30.933 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==>  Preparing: INSERT INTO tb_product(`name`, `desc`, `addr`, `normal_price`, `promotion_price`, `priority`, `create_time`, `update_time`, `status`, `product_category_id`, `shop_id`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-04-28 00:56:30.934 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==> Parameters: 测试商品3(String), desc1(String), addr1(String), null, null, 1(Integer), null, null, 1(Integer), 4(Long), 3(Long)
2018-04-28 00:56:30.935 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - <==    Updates: 1
2018-04-28 00:58:48.713 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductImgDao.batchInsertProductImg] use [master] Strategy, SqlCommanType [INSERT]...
2018-04-28 00:58:48.717 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 00:58:48.753 [main] DEBUG c.l.o2o.dao.ProductImgDao.batchInsertProductImg - ==>  Preparing: INSERT INTO tb_product_img(`addr`, `desc`, `priority`, `create_time`, `update_time`, `product_id`) VALUES (?, ?, ?, ?, ?, ?) , (?, ?, ?, ?, ?, ?) 
2018-04-28 00:58:48.780 [main] DEBUG c.l.o2o.dao.ProductImgDao.batchInsertProductImg - ==> Parameters: 图片1(String), 测试图片1(String), 1(Integer), 2018-04-28 00:58:48.698(Timestamp), null, 2(Long), 图片2(String), 测试图片2(String), 1(Integer), 2018-04-28 00:58:48.698(Timestamp), null, 2(Long)
2018-04-28 00:58:48.787 [main] DEBUG c.l.o2o.dao.ProductImgDao.batchInsertProductImg - <==    Updates: 2
2018-04-28 00:58:48.794 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductDao.queryProductById] use [slave] Strategy, SqlCommanType [SELECT]...
2018-04-28 00:58:48.794 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：slave
2018-04-28 00:58:48.795 [main] DEBUG c.liangweibang.o2o.dao.ProductDao.queryProductById - ==>  Preparing: SELECT p.product_id, p.name, p.desc, p.addr, p.normal_price, p.promotion_price, p.priority, p.create_time, p.update_time, p.status, p.product_category_id, p.shop_id, pm.product_img_id, pm.addr AS detail_img, pm.desc, pm.priority, pm.create_time, pm.update_time FROM tb_product p LEFT JOIN tb_product_img pm ON p.product_id = pm.product_id WHERE p.product_id = ? ORDER BY pm.priority DESC 
2018-04-28 00:58:48.795 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductImgDao.batchInsertProductImg] use [master] Strategy, SqlCommanType [INSERT]...
2018-04-28 00:58:48.799 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 00:58:48.812 [main] DEBUG c.liangweibang.o2o.dao.ProductDao.queryProductById - ==> Parameters: 2(Long)
2018-04-28 00:58:48.844 [main] DEBUG c.liangweibang.o2o.dao.ProductDao.queryProductById - <==      Total: 2
2018-04-28 00:58:48.853 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductImgDao.deleteProductImgByProductId] use [master] Strategy, SqlCommanType [DELETE]...
2018-04-28 00:58:48.853 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 00:58:48.853 [main] DEBUG c.l.o.d.ProductImgDao.deleteProductImgByProductId - ==>  Preparing: DELETE FROM tb_product_img WHERE product_id = ? 
2018-04-28 00:58:48.854 [main] DEBUG c.l.o.d.ProductImgDao.deleteProductImgByProductId - ==> Parameters: 2(Long)
2018-04-28 00:58:48.857 [main] DEBUG c.l.o.d.ProductImgDao.deleteProductImgByProductId - <==    Updates: 2
2018-04-28 00:58:48.860 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductDao.updateProduct] use [master] Strategy, SqlCommanType [UPDATE]...
2018-04-28 00:58:48.860 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 00:58:48.868 [main] DEBUG c.l.o2o.dao.ProductImgDao.batchInsertProductImg - ==>  Preparing: INSERT INTO tb_product_img(`addr`, `desc`, `priority`, `create_time`, `update_time`, `product_id`) VALUES (?, ?, ?, ?, ?, ?) , (?, ?, ?, ?, ?, ?) 
2018-04-28 00:58:48.872 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.updateProduct - ==>  Preparing: UPDATE tb_product SET name=? product_category_id=? WHERE product_id = ? AND shop_id = ? 
2018-04-28 00:58:48.873 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.updateProduct - ==> Parameters: 奶茶111(String), 31(Long), 2(Long), 3(Long)
2018-04-28 00:58:48.909 [main] DEBUG c.l.o2o.dao.ProductImgDao.batchInsertProductImg - ==> Parameters: 图片1(String), 测试图片1(String), 1(Integer), 2018-04-28 00:58:48.777(Timestamp), null, 2(Long), 图片2(String), 测试图片2(String), 1(Integer), 2018-04-28 00:58:48.777(Timestamp), null, 2(Long)
2018-04-28 00:58:48.915 [main] DEBUG c.l.o2o.dao.ProductImgDao.batchInsertProductImg - <==    Updates: 2
2018-04-28 00:58:48.925 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductDao.queryProductById] use [slave] Strategy, SqlCommanType [SELECT]...
2018-04-28 00:58:48.926 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：slave
2018-04-28 00:58:48.931 [main] DEBUG c.liangweibang.o2o.dao.ProductDao.queryProductById - ==>  Preparing: SELECT p.product_id, p.name, p.desc, p.addr, p.normal_price, p.promotion_price, p.priority, p.create_time, p.update_time, p.status, p.product_category_id, p.shop_id, pm.product_img_id, pm.addr AS detail_img, pm.desc, pm.priority, pm.create_time, pm.update_time FROM tb_product p LEFT JOIN tb_product_img pm ON p.product_id = pm.product_id WHERE p.product_id = ? ORDER BY pm.priority DESC 
2018-04-28 00:58:48.937 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductDao.insertProduct] use [master] Strategy, SqlCommanType [INSERT]...
2018-04-28 00:58:48.937 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 00:58:48.937 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==>  Preparing: INSERT INTO tb_product(`name`, `desc`, `addr`, `normal_price`, `promotion_price`, `priority`, `create_time`, `update_time`, `status`, `product_category_id`, `shop_id`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-04-28 00:58:48.940 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==> Parameters: 测试商品1(String), desc1(String), addr1(String), null, null, 1(Integer), null, null, 1(Integer), 4(Long), 3(Long)
2018-04-28 00:58:48.945 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - <==    Updates: 1
2018-04-28 00:58:48.963 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductDao.insertProduct] use [master] Strategy, SqlCommanType [INSERT]...
2018-04-28 00:58:48.963 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 00:58:48.964 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==>  Preparing: INSERT INTO tb_product(`name`, `desc`, `addr`, `normal_price`, `promotion_price`, `priority`, `create_time`, `update_time`, `status`, `product_category_id`, `shop_id`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-04-28 00:58:48.965 [main] DEBUG c.liangweibang.o2o.dao.ProductDao.queryProductById - ==> Parameters: 2(Long)
2018-04-28 00:58:48.965 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==> Parameters: 测试商品2(String), desc1(String), addr1(String), null, null, 1(Integer), null, null, 1(Integer), 4(Long), 3(Long)
2018-04-28 00:58:48.967 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - <==    Updates: 1
2018-04-28 00:58:48.968 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductDao.insertProduct] use [master] Strategy, SqlCommanType [INSERT]...
2018-04-28 00:58:48.968 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 00:58:48.968 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==>  Preparing: INSERT INTO tb_product(`name`, `desc`, `addr`, `normal_price`, `promotion_price`, `priority`, `create_time`, `update_time`, `status`, `product_category_id`, `shop_id`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-04-28 00:58:48.969 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==> Parameters: 测试商品3(String), desc1(String), addr1(String), null, null, 1(Integer), null, null, 1(Integer), 4(Long), 3(Long)
2018-04-28 00:58:48.971 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - <==    Updates: 1
2018-04-28 00:58:48.988 [main] DEBUG c.liangweibang.o2o.dao.ProductDao.queryProductById - <==      Total: 2
2018-04-28 00:58:48.996 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductImgDao.deleteProductImgByProductId] use [master] Strategy, SqlCommanType [DELETE]...
2018-04-28 00:58:48.996 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 00:58:48.996 [main] DEBUG c.l.o.d.ProductImgDao.deleteProductImgByProductId - ==>  Preparing: DELETE FROM tb_product_img WHERE product_id = ? 
2018-04-28 00:58:48.997 [main] DEBUG c.l.o.d.ProductImgDao.deleteProductImgByProductId - ==> Parameters: 2(Long)
2018-04-28 00:58:48.999 [main] DEBUG c.l.o.d.ProductImgDao.deleteProductImgByProductId - <==    Updates: 2
2018-04-28 00:58:49.003 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductDao.updateProduct] use [master] Strategy, SqlCommanType [UPDATE]...
2018-04-28 00:58:49.003 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 00:58:49.018 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.updateProduct - ==>  Preparing: UPDATE tb_product SET name=? product_category_id=? WHERE product_id = ? AND shop_id = ? 
2018-04-28 00:58:49.019 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.updateProduct - ==> Parameters: 奶茶111(String), 31(Long), 2(Long), 3(Long)
2018-04-28 00:58:49.070 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductDao.insertProduct] use [master] Strategy, SqlCommanType [INSERT]...
2018-04-28 00:58:49.071 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 00:58:49.071 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==>  Preparing: INSERT INTO tb_product(`name`, `desc`, `addr`, `normal_price`, `promotion_price`, `priority`, `create_time`, `update_time`, `status`, `product_category_id`, `shop_id`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-04-28 00:58:49.072 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==> Parameters: 测试商品1(String), desc1(String), addr1(String), null, null, 1(Integer), null, null, 1(Integer), 4(Long), 3(Long)
2018-04-28 00:58:49.076 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - <==    Updates: 1
2018-04-28 00:58:49.077 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductDao.insertProduct] use [master] Strategy, SqlCommanType [INSERT]...
2018-04-28 00:58:49.077 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 00:58:49.077 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==>  Preparing: INSERT INTO tb_product(`name`, `desc`, `addr`, `normal_price`, `promotion_price`, `priority`, `create_time`, `update_time`, `status`, `product_category_id`, `shop_id`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-04-28 00:58:49.078 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==> Parameters: 测试商品2(String), desc1(String), addr1(String), null, null, 1(Integer), null, null, 1(Integer), 4(Long), 3(Long)
2018-04-28 00:58:49.079 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - <==    Updates: 1
2018-04-28 00:58:49.080 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductDao.insertProduct] use [master] Strategy, SqlCommanType [INSERT]...
2018-04-28 00:58:49.080 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 00:58:49.081 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==>  Preparing: INSERT INTO tb_product(`name`, `desc`, `addr`, `normal_price`, `promotion_price`, `priority`, `create_time`, `update_time`, `status`, `product_category_id`, `shop_id`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-04-28 00:58:49.082 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==> Parameters: 测试商品3(String), desc1(String), addr1(String), null, null, 1(Integer), null, null, 1(Integer), 4(Long), 3(Long)
2018-04-28 00:58:49.083 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - <==    Updates: 1
2018-04-28 01:00:36.112 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductImgDao.batchInsertProductImg] use [master] Strategy, SqlCommanType [INSERT]...
2018-04-28 01:00:36.115 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 01:00:36.149 [main] DEBUG c.l.o2o.dao.ProductImgDao.batchInsertProductImg - ==>  Preparing: INSERT INTO tb_product_img(`addr`, `desc`, `priority`, `create_time`, `update_time`, `product_id`) VALUES (?, ?, ?, ?, ?, ?) , (?, ?, ?, ?, ?, ?) 
2018-04-28 01:00:36.172 [main] DEBUG c.l.o2o.dao.ProductImgDao.batchInsertProductImg - ==> Parameters: 图片1(String), 测试图片1(String), 1(Integer), 2018-04-28 01:00:36.097(Timestamp), null, 2(Long), 图片2(String), 测试图片2(String), 1(Integer), 2018-04-28 01:00:36.097(Timestamp), null, 2(Long)
2018-04-28 01:00:36.180 [main] DEBUG c.l.o2o.dao.ProductImgDao.batchInsertProductImg - <==    Updates: 2
2018-04-28 01:00:36.186 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductDao.queryProductById] use [slave] Strategy, SqlCommanType [SELECT]...
2018-04-28 01:00:36.187 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：slave
2018-04-28 01:00:36.187 [main] DEBUG c.liangweibang.o2o.dao.ProductDao.queryProductById - ==>  Preparing: SELECT p.product_id, p.name, p.desc, p.addr, p.normal_price, p.promotion_price, p.priority, p.create_time, p.update_time, p.status, p.product_category_id, p.shop_id, pm.product_img_id, pm.addr AS detail_img, pm.desc, pm.priority, pm.create_time, pm.update_time FROM tb_product p LEFT JOIN tb_product_img pm ON p.product_id = pm.product_id WHERE p.product_id = ? ORDER BY pm.priority DESC 
2018-04-28 01:00:36.198 [main] DEBUG c.liangweibang.o2o.dao.ProductDao.queryProductById - ==> Parameters: 2(Long)
2018-04-28 01:00:36.214 [main] DEBUG c.liangweibang.o2o.dao.ProductDao.queryProductById - <==      Total: 2
2018-04-28 01:00:36.220 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductImgDao.deleteProductImgByProductId] use [master] Strategy, SqlCommanType [DELETE]...
2018-04-28 01:00:36.220 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 01:00:36.220 [main] DEBUG c.l.o.d.ProductImgDao.deleteProductImgByProductId - ==>  Preparing: DELETE FROM tb_product_img WHERE product_id = ? 
2018-04-28 01:00:36.220 [main] DEBUG c.l.o.d.ProductImgDao.deleteProductImgByProductId - ==> Parameters: 2(Long)
2018-04-28 01:00:36.223 [main] DEBUG c.l.o.d.ProductImgDao.deleteProductImgByProductId - <==    Updates: 2
2018-04-28 01:00:36.226 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductDao.updateProduct] use [master] Strategy, SqlCommanType [UPDATE]...
2018-04-28 01:00:36.226 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 01:00:36.239 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.updateProduct - ==>  Preparing: UPDATE tb_product SET name=?, product_category_id=? WHERE product_id = ? AND shop_id = ? 
2018-04-28 01:00:36.240 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.updateProduct - ==> Parameters: 奶茶111(String), 31(Long), 2(Long), 3(Long)
2018-04-28 01:00:36.242 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.updateProduct - <==    Updates: 1
2018-04-28 01:00:36.244 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductDao.insertProduct] use [master] Strategy, SqlCommanType [INSERT]...
2018-04-28 01:00:36.244 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 01:00:36.245 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==>  Preparing: INSERT INTO tb_product(`name`, `desc`, `addr`, `normal_price`, `promotion_price`, `priority`, `create_time`, `update_time`, `status`, `product_category_id`, `shop_id`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-04-28 01:00:36.246 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==> Parameters: 测试商品1(String), desc1(String), addr1(String), null, null, 1(Integer), null, null, 1(Integer), 4(Long), 3(Long)
2018-04-28 01:00:36.247 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - <==    Updates: 1
2018-04-28 01:00:36.248 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductDao.insertProduct] use [master] Strategy, SqlCommanType [INSERT]...
2018-04-28 01:00:36.248 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 01:00:36.248 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==>  Preparing: INSERT INTO tb_product(`name`, `desc`, `addr`, `normal_price`, `promotion_price`, `priority`, `create_time`, `update_time`, `status`, `product_category_id`, `shop_id`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-04-28 01:00:36.249 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==> Parameters: 测试商品2(String), desc1(String), addr1(String), null, null, 1(Integer), null, null, 1(Integer), 4(Long), 3(Long)
2018-04-28 01:00:36.251 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - <==    Updates: 1
2018-04-28 01:00:36.252 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.liangweibang.o2o.dao.ProductDao.insertProduct] use [master] Strategy, SqlCommanType [INSERT]...
2018-04-28 01:00:36.252 [main] DEBUG c.l.o2o.dao.split.DynamicDataSourceHolder - 所使用的数据源为：master
2018-04-28 01:00:36.252 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==>  Preparing: INSERT INTO tb_product(`name`, `desc`, `addr`, `normal_price`, `promotion_price`, `priority`, `create_time`, `update_time`, `status`, `product_category_id`, `shop_id`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-04-28 01:00:36.253 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - ==> Parameters: 测试商品3(String), desc1(String), addr1(String), null, null, 1(Integer), null, null, 1(Integer), 4(Long), 3(Long)
2018-04-28 01:00:36.254 [main] DEBUG com.liangweibang.o2o.dao.ProductDao.insertProduct - <==    Updates: 1
